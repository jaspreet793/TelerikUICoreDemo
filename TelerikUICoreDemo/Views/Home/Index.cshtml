@{
    ViewData["Title"] = "Grid";
}

<style>
    .k-filtercell > span > input {
        width: 100% !important;
    }
</style>

@(Html.Kendo().Notification()
        .Name("popupNotification")
)

@(Html.Kendo().Grid<TelerikUICoreDemo.Models.Dealer>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(c => c.Id);
        columns.Bound(c => c.Name)
            .ClientFooterTemplate("Total Count: #=count#")
            .ClientGroupHeaderTemplate("Name: #= value # (Count: #=count#)")
            .ClientFooterTemplate("Count: #=count#");
        columns.Bound(c => c.StartDate);
        columns.Bound(c => c.Balance);
        columns.Bound(c => c.Email);
        columns.Bound(c => c.EditUrl)
            .ClientTemplate("<a href='#: EditUrl #' target='_blank'>#: EditUrl #</a>");
        columns.Command(command => command.Destroy()).Width(150);
    })
    .ToolBar(toolBar =>
    {
        toolBar.Create();
        toolBar.Save();
        toolBar.Excel();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .Sortable()
    .Scrollable()
    .Excel(excel => excel
        .FileName("Kendo UI Grid Export.xlsx")
        .Filterable(true)
        .ProxyURL(Url.Action("Customers_Read", "Home"))
    )
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(20)
        .ServerOperation(false)
        .Events(events => events.Error("errorHandler"))
        .Aggregates(aggregates =>
        {
            aggregates.Add(p => p.Name).Count();
        })
        .Group(groups => groups.Add(p => p.Name))
        .Model(model =>
        {
            model.Id(p => p.Id);
            model.Field(p => p.Id).Editable(false);
            model.Field(p => p.Name);
            model.Field(p => p.StartDate);
            model.Field(p => p.Balance);
            model.Field(p => p.Email);
            model.Field(p => p.EditUrl);
        })
        .Read(read => read.Action("Customers_Read", "Home"))
        .Update(update => update.Action("Customers_Update", "Home"))
        .Create(create => create.Action("Customers_Create", "Home"))
        .Destroy(destroy => destroy.Action("Customers_Destroy", "Home"))
    )
)

<script type="text/javascript">
    var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");
    function errorHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            popupNotification.show(message, "error");
        }
    }
</script>
